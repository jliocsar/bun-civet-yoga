type { IResolvers } from @graphql-tools/utils
type { Dict, Constructor } from ../utils/types.civet
* as Symbol from ./symbols.civet

export buildResolvers := <
  TContext extends Dict<any> = Dict<any>,
  TResolvers extends Constructor[] = Constructor[]
>(resolvers: TResolvers) ->
  resolvers.reduce((acc, Resolver) =>
    resolver := new Resolver
    keys := Resolver.prototype
      |> Object.getOwnPropertyNames
      |> .slice 1
    for key of keys
      if Symbol.MUTATION in resolver[key]
        unless acc.Mutation
          acc.Mutation = {}
        (acc as any).Mutation[key] = resolver[key]
      if Symbol.QUERY in resolver[key]
        unless acc.Query
          acc.Query = {}
        (acc as any).Query[key] = resolver[key]
    acc
  , {} as IResolvers<any, TContext>)
